{"version":3,"sources":["webpack:///../../../src/components/VBadge/VBadge.ts","webpack:///./src/views/Dashboard/components/maps/index.vue?086e","webpack:///src/views/Dashboard/components/maps/index.vue","webpack:///./src/views/Dashboard/components/maps/index.vue?de1c","webpack:///./src/views/Dashboard/components/maps/index.vue","webpack:///../../../src/components/VAutocomplete/VAutocomplete.ts","webpack:///../../../src/mixins/transitionable/index.ts"],"names":["name","props","avatar","bordered","color","type","default","content","required","dot","label","icon","inline","offsetX","Number","offsetY","overlap","tile","transition","value","computed","classes","this","themeClasses","computedBottom","bottom","computedLeft","left","computedRight","computedTop","computedXOffset","calcPosition","computedYOffset","isRtl","$vuetify","offset","styles","right","top","methods","genBadge","lang","$attrs","data","setBackgroundColor","staticClass","style","attrs","title","role","directives","isActive","badge","$createElement","origin","mode","genBadgeContent","slot","String","genBadgeWrapper","render","children","h","class","_vm","_h","_c","_self","_v","staticStyle","map_type","items","rounded","model","callback","$$v","$set","expression","maps","loading","_s","text","_e","key","ref","staticRenderFns","watch","mapOptions","show","component","VAutocomplete","VBadge","VCard","VCardText","VDivider","VIcon","VOverlay","VProgressCircular","defaultMenuProps","offsetOverflow","allowOverflow","autoSelectFirst","filter","itemText","queryText","hideNoData","menuProps","noFilter","searchInput","lazySearch","selectedIndex","computedItems","selectedValues","selectedItems","map","item","hasDisplayedItems","hideSelected","filteredItems","some","length","currentRange","selectedItem","getText","internalSearch","allItems","get","set","isAnyValueAllowed","isDirty","searchIsDirty","isSearching","multiple","menuCanShow","$_menuProps","find","i","listData","internalValue","isFocused","document","$refs","input","isMenuActive","val","oldVal","activateMenu","created","destroyed","onFilteredItemsChanged","onInternalSearchChanged","updateMenuDimensions","menu","changeSelectedIndex","keyCode","deleteCurrentItem","curIndex","curItem","getDisabled","lastIndex","nextIndex","nextItem","clearableCallback","genInput","autocomplete","domProps","genInputSlot","genSelections","hasSlot","onClick","isAppendInner","e","onInput","target","onKeyDown","onSpaceDown","onTabDown","onUpDown","selectItem","setSelectedItems","setSearch","updateSelf","valueComparator","getValue","hasItem","indexOf","onCopy","currentItem","currentItemText","event"],"mappings":"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","file":"js/chunk-d7942882.dc8a92cc.js","sourcesContent":["// Styles\nimport './VBadge.sass'\n\n// Components\nimport VIcon from '../VIcon/VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport Themeable from '../../mixins/themeable'\nimport Toggleable from '../../mixins/toggleable'\nimport Transitionable from '../../mixins/transitionable'\nimport { factory as PositionableFactory } from '../../mixins/positionable'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport {\n  convertToUnit,\n  getSlot,\n} from '../../util/helpers'\n\n// Types\nimport { VNode } from 'vue'\n\nexport default mixins(\n  Colorable,\n  PositionableFactory(['left', 'bottom']),\n  Themeable,\n  Toggleable,\n  Transitionable,\n/* @vue/component */\n).extend({\n  name: 'v-badge',\n\n  props: {\n    avatar: Boolean,\n    bordered: Boolean,\n    color: {\n      type: String,\n      default: 'primary',\n    },\n    content: { required: false },\n    dot: Boolean,\n    label: {\n      type: String,\n      default: '$vuetify.badge',\n    },\n    icon: String,\n    inline: Boolean,\n    offsetX: [Number, String],\n    offsetY: [Number, String],\n    overlap: Boolean,\n    tile: Boolean,\n    transition: {\n      type: String,\n      default: 'scale-rotate-transition',\n    },\n    value: { default: true },\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-badge--avatar': this.avatar,\n        'v-badge--bordered': this.bordered,\n        'v-badge--bottom': this.bottom,\n        'v-badge--dot': this.dot,\n        'v-badge--icon': this.icon != null,\n        'v-badge--inline': this.inline,\n        'v-badge--left': this.left,\n        'v-badge--overlap': this.overlap,\n        'v-badge--tile': this.tile,\n        ...this.themeClasses,\n      }\n    },\n    computedBottom (): string {\n      return this.bottom ? 'auto' : this.computedYOffset\n    },\n    computedLeft (): string {\n      if (this.isRtl) {\n        return this.left ? this.computedXOffset : 'auto'\n      }\n\n      return this.left ? 'auto' : this.computedXOffset\n    },\n    computedRight (): string {\n      if (this.isRtl) {\n        return this.left ? 'auto' : this.computedXOffset\n      }\n\n      return !this.left ? 'auto' : this.computedXOffset\n    },\n    computedTop (): string {\n      return this.bottom ? this.computedYOffset : 'auto'\n    },\n    computedXOffset (): string {\n      return this.calcPosition(this.offsetX)\n    },\n    computedYOffset (): string {\n      return this.calcPosition(this.offsetY)\n    },\n    isRtl (): boolean {\n      return this.$vuetify.rtl\n    },\n    // Default fallback if offsetX\n    // or offsetY are undefined.\n    offset (): number {\n      if (this.overlap) return this.dot ? 8 : 12\n      return this.dot ? 2 : 4\n    },\n    styles (): object {\n      if (this.inline) return {}\n\n      return {\n        bottom: this.computedBottom,\n        left: this.computedLeft,\n        right: this.computedRight,\n        top: this.computedTop,\n      }\n    },\n  },\n\n  methods: {\n    calcPosition (offset: string | number): string {\n      return `calc(100% - ${convertToUnit(offset || this.offset)})`\n    },\n    genBadge () {\n      const lang = this.$vuetify.lang\n      const label = this.$attrs['aria-label'] || lang.t(this.label)\n\n      const data = this.setBackgroundColor(this.color, {\n        staticClass: 'v-badge__badge',\n        style: this.styles,\n        attrs: {\n          'aria-atomic': this.$attrs['aria-atomic'] || 'true',\n          'aria-label': label,\n          'aria-live': this.$attrs['aria-live'] || 'polite',\n          title: this.$attrs.title,\n          role: this.$attrs.role || 'status',\n        },\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      })\n\n      const badge = this.$createElement('span', data, [this.genBadgeContent()])\n\n      if (!this.transition) return badge\n\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin,\n          mode: this.mode,\n        },\n      }, [badge])\n    },\n    genBadgeContent () {\n      // Dot prop shows no content\n      if (this.dot) return undefined\n\n      const slot = getSlot(this, 'badge')\n\n      if (slot) return slot\n      if (this.content) return String(this.content)\n      if (this.icon) return this.$createElement(VIcon, this.icon)\n\n      return undefined\n    },\n    genBadgeWrapper () {\n      return this.$createElement('span', {\n        staticClass: 'v-badge__wrapper',\n      }, [this.genBadge()])\n    },\n  },\n\n  render (h): VNode {\n    const badge = [this.genBadgeWrapper()]\n    const children = [getSlot(this)]\n    const {\n      'aria-atomic': _x,\n      'aria-label': _y,\n      'aria-live': _z,\n      role,\n      title,\n      ...attrs\n    } = this.$attrs\n\n    if (this.inline && this.left) children.unshift(badge)\n    else children.push(badge)\n\n    return h('span', {\n      staticClass: 'v-badge',\n      attrs,\n      class: this.classes,\n    }, children)\n  },\n})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-card',{staticClass:\"rounded-xl mt-4\"},[_c('v-card-text',{staticClass:\"pb-1\"},[_c('div',{staticClass:\"d-flex align-center mb-2\"},[_c('v-badge',{attrs:{\"content\":\"Develop\",\"color\":\"warning\"}},[_c('v-icon',[_vm._v(\"mdi-map\")]),_vm._v(\" Peta \")],1),_c('v-divider',{staticClass:\"ml-2\"}),_c('v-autocomplete',{staticClass:\"ml-2\",staticStyle:{\"max-width\":\"250px\"},attrs:{\"dense\":\"\",\"color\":\"success\",\"hide-details\":\"\",\"item-color\":\"success\",\"items\":_vm.map_type.items,\"label\":_vm.map_type.label,\"menu-props\":{rounded: 'xl',transition: 'slide-y-transition'},\"outlined\":\"\",\"rounded\":\"\"},model:{value:(_vm.map_type.model),callback:function ($$v) {_vm.$set(_vm.map_type, \"model\", $$v)},expression:\"map_type.model\"}})],1),_c('v-card',{staticClass:\"rounded-xl elevation-0 overflow-hidden mb-4\",staticStyle:{\"width\":\"100%\"}},[_c('v-card-text',{staticClass:\"pa-0\",staticStyle:{\"position\":\"relative\",\"width\":\"100%\"}},[(_vm.maps.loading.show)?_c('v-overlay',{attrs:{\"absolute\":\"\",\"justify-center\":\"\",\"align-center\":\"\"}},[_c('div',{staticClass:\"d-flex flex-column align-center justify-center\"},[_c('v-progress-circular',{attrs:{\"size\":80,\"width\":7,\"indeterminate\":\"\",\"color\":\"white\"}}),_c('p',{staticClass:\"mb-0 text-center mt-4\"},[_vm._v(_vm._s(_vm.maps.loading.text || 'Loading...'))])],1)]):_vm._e(),_c('div',{staticClass:\"overflow-hidden rounded-xl\",staticStyle:{\"position\":\"relative\",\"width\":\"100%\"},attrs:{\"id\":\"mapboxWrapper\",\"data-aos\":\"fade-down\"}},[_c('div',{key:'DashboardMap' + _vm.maps.key,ref:'DashboardMapbox',staticClass:\"rounded-xl overflow-hidden\",staticStyle:{\"height\":\"500px\",\"width\":\"100%!important\"},attrs:{\"id\":\"DashboardMapboxContainer\"}})])],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <v-card class=\"rounded-xl mt-4\">\r\n    <v-card-text class=\"pb-1\">\r\n      <div class=\"d-flex align-center mb-2\">\r\n          <v-badge content=\"Develop\" color=\"warning\"><v-icon>mdi-map</v-icon> Peta </v-badge>\r\n          <v-divider class=\"ml-2\"></v-divider>\r\n          <v-autocomplete\r\n            dense\r\n            color=\"success\"\r\n            hide-details\r\n            item-color=\"success\"\r\n            class=\"ml-2\"\r\n            :items=\"map_type.items\"\r\n            :label=\"map_type.label\"\r\n            :menu-props=\"{rounded: 'xl',transition: 'slide-y-transition'}\"\r\n            outlined\r\n            rounded\r\n            v-model=\"map_type.model\"\r\n            style=\"max-width: 250px;\"\r\n          ></v-autocomplete>\r\n      </div>\r\n      <v-card class=\"rounded-xl elevation-0 overflow-hidden mb-4\" style=\"width: 100%\">\r\n        <v-card-text class=\"pa-0\" style=\"position: relative;width: 100%\">\r\n            <!-- loading overlay -->\r\n            <v-overlay v-if=\"maps.loading.show\" absolute justify-center align-center>\r\n                <div class=\"d-flex flex-column align-center justify-center\">\r\n                    <v-progress-circular\r\n                        :size=\"80\"\r\n                        :width=\"7\"\r\n                        indeterminate\r\n                        color=\"white\"\r\n                    >\r\n                    </v-progress-circular>\r\n                    <p class=\"mb-0 text-center mt-4\">{{ maps.loading.text || 'Loading...' }}</p>\r\n                </div>\r\n            </v-overlay>\r\n            <!-- Mapbox -->\r\n            <div id=\"mapboxWrapper\"\r\n                data-aos=\"fade-down\"\r\n                class=\"overflow-hidden rounded-xl\" style=\"position: relative;width: 100%\"\r\n            >\r\n                <!-- map -->\r\n                <div :id=\"`DashboardMapboxContainer`\" :ref=\"'DashboardMapbox'\" :key=\"'DashboardMap' + maps.key\" \r\n                    style=\"height: 500px;width: 100%!important\" class=\"rounded-xl overflow-hidden\"></div>\r\n            </div>\r\n        </v-card-text>\r\n      </v-card>\r\n    </v-card-text>\r\n  </v-card>\r\n</template>\r\n<script>\r\nimport axios from \"axios\"\r\nimport Swal from 'sweetalert2'\r\n\r\nexport default {\r\n  data: () => ({\r\n      map_type: {\r\n        items: [\r\n          'Wilayah Target',\r\n          'Contoh Lahan'\r\n        ],\r\n        label: 'Data Peta',\r\n        model: 'Wilayah Target',\r\n      },\r\n      maps:{\r\n          accessToken: '',\r\n          mapStyle: '',\r\n          model: null,\r\n          attribution: '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a>',\r\n          center: [113.921300, -0.789300],\r\n          // center: [39.826204, 21.422484],\r\n          // center: [107.52657620636666, -7.0917231719],\r\n          url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n          legends: {\r\n              model: ''\r\n          },\r\n          listMarker: [],\r\n          loading: {\r\n              show: false,\r\n              text: 'Loading...'\r\n          },\r\n          zoom: 3,\r\n          geojson: {},\r\n          key: 9292183,\r\n          layerId: 0,\r\n          hoveredStateId: 0,\r\n          layerStyle: {\r\n              outline: {\r\n                  color: '#000000'\r\n              },\r\n              fill: {\r\n                  color: '#f06800'\r\n              },\r\n          },\r\n          popup: {\r\n              model: false,\r\n              content: {\r\n              title: '',\r\n              description: ''\r\n              }\r\n          }\r\n      },\r\n  }),\r\n  watch: {\r\n    'map_type.model': {\r\n      async handler(val) {\r\n        if (val == 'Wilayah Target') await this.initializeMapPolygon()\r\n        if (val == 'Contoh Lahan') await this.initializeMapLahan()\r\n      }\r\n    }\r\n  },\r\n  async mounted() {\r\n      this.maps.accessToken = this.$store.state.maps.accessToken\r\n      this.maps.mapStyle = this.$store.state.maps.mapStyle\r\n      await this.initializeMapPolygon()\r\n      // this.map_type.model = 'Contoh Lahan'\r\n      // await this.initializeMapLahan()\r\n  },\r\n  methods: {\r\n      errorResponse(error) {\r\n          console.log(error)\r\n          if (error.response) {\r\n              if (error.response.status) {\r\n                  if (error.response.status == 401) {\r\n                      localStorage.removeItem(\"token\");\r\n                      this.$router.push(\"/\");\r\n                  } else Swal.fire({\r\n                      title: 'Error!',\r\n                      text: `${error.response.message}`,\r\n                      icon: 'error',\r\n                      confirmButtonColor: '#f44336',\r\n                  }) \r\n              } else Swal.fire({\r\n                  title: 'Error!',\r\n                  text: `${error.message}`,\r\n                  icon: 'error',\r\n                  confirmButtonColor: '#f44336',\r\n              }) \r\n          }\r\n      },\r\n      // maps\r\n      async initializeMapPolygon() {\r\n          try {\r\n              const mapOptions = this.maps\r\n              mapOptions.loading.show = true\r\n              // const markerCoordinates = [this.long, this.lat]\r\n              mapboxgl.accessToken = mapOptions.accessToken\r\n              if (!mapboxgl.supported()) {\r\n                  Swal.fire({\r\n                      title: 'Warning!',\r\n                      text: `Your browser does not support Mapbox GL.`,\r\n                      icon: 'error',\r\n                      confirmButtonColor: '#f44336',\r\n                  }) \r\n              } else if (true) {\r\n                  mapOptions.loading.show = true\r\n                  const layerStyle = mapOptions.layerStyle\r\n                  const sourceId = this._utils.generateRandomString(5) + Date.now()\r\n                  \r\n                  let layerId = mapOptions.layerId\r\n                  let hoveredStateId = this.maps.hoveredStateId;\r\n                  layerStyle.fill.color = this._utils.getRandomColor()\r\n                  mapOptions.loading.text = 'Getting polygon data...'\r\n                  var runLayer = await omnivore.kml(`${this.$store.state.apiUrlImage}maps/testing/Unit_Management.kml`).on(\"ready\", async function() {\r\n                      const GeoJsonData = await runLayer.toGeoJSON()\r\n                      await GeoJsonData.features.map((val, i) => { \r\n                          val.id = layerId += 1\r\n                      })\r\n                      // console.log(GeoJsonData)\r\n                      if (GeoJsonData.features.length === 0) { \r\n                          mapOptions.loading.show = await false\r\n                          await Swal.fire({\r\n                              title: 'Error!',\r\n                              text: `Polygon Features is 0.`,\r\n                              icon: 'error',\r\n                              confirmButtonColor: '#f44336',\r\n                          }) \r\n                      } else {\r\n                          mapOptions.loading.text = 'Initialize map...'\r\n                          let map = await new mapboxgl.Map({\r\n                              container: 'DashboardMapboxContainer', // container ID\r\n                              style: mapOptions.mapStyle, // style URL\r\n                              center: mapOptions.center,\r\n                              zoom: mapOptions.zoom,\r\n                              projection: 'globe'\r\n                              // projection: 'equirectangular'\r\n                          });\r\n                          // console.log('map')\r\n                                // disable map zoom when using scroll\r\n                            await map.scrollZoom.disable();\r\n                          // disable map rotation using right click + drag\r\n                          await map.dragRotate.disable();\r\n                          // disable map rotation using touch rotation gesture\r\n                          await map.touchZoomRotate.disableRotation();\r\n                          // add fullscreen function\r\n                          await map.addControl(new mapboxgl.FullscreenControl());\r\n                          await map.on(\"load\", async function() {\r\n                              // add fog\r\n                              await map.setFog({\r\n                                  color: 'rgb(186, 210, 235)', // Lower atmosphere\r\n                                  'high-color': 'rgb(36, 92, 223)', // Upper atmosphere\r\n                                  'horizon-blend': 0.02, // Atmosphere thickness (default 0.2 at low zooms)\r\n                                  'space-color': 'rgb(11, 11, 25)', // Background color\r\n                                  'star-intensity': 0.6 // Background star brightness (default 0.35 at low zoooms )\r\n                              });\r\n                              // Add zoom and rotation controls to the map.\r\n                              await map.addControl(new mapboxgl.NavigationControl());\r\n                              // Add a data source containing GeoJSON data.\r\n                              await map.addSource(sourceId, {\r\n                                  'type': 'geojson',\r\n                                  'data': GeoJsonData\r\n                              });\r\n                              // Add a new layer to visualize the polygon.\r\n                              await map.addLayer({\r\n                                  'id': `${sourceId}-fills`,\r\n                                  'type': 'fill',\r\n                                  'source': sourceId, // reference the data source\r\n                                  'layout': {},\r\n                                  'paint': {\r\n                                      'fill-color': layerStyle.fill.color, // blue color fill\r\n                                      'fill-opacity': [\r\n                                      'case',\r\n                                      ['boolean', ['feature-state', 'hover'], false],\r\n                                      0.1,\r\n                                      0.5\r\n                                      ]\r\n                                  }\r\n                              });\r\n                              // Add a black outline around the polygon.\r\n                              await map.addLayer({\r\n                                  'id': `${sourceId}-outline`,\r\n                                  'type': 'line',\r\n                                  'source': sourceId,\r\n                                  'layout': {},\r\n                                  'paint': {\r\n                                      'line-color': layerStyle.outline.color,\r\n                                      'line-width': 2\r\n                                  }\r\n                              });\r\n                              // Centering view\r\n                              var center = turf.center(GeoJsonData);\r\n                              const centerCoordinates = center.geometry.coordinates\r\n                              // console.log(centerCoordinates)\r\n                              await map.flyTo({\r\n                                  center: [centerCoordinates[0], centerCoordinates[1]],\r\n                                  zoom: 9,\r\n                                  duration: 7 * 1000\r\n                              });\r\n                              const popup =  new mapboxgl.Popup({\r\n                                closeButton: false,\r\n                                closeOnClick: false\r\n                              });\r\n                              // mousemove event\r\n                              map.on('mousemove', `${sourceId}-fills`, (e) => {\r\n                                  const coor = e.lngLat\r\n                                  if (e.features.length > 0) {\r\n                                      if (hoveredStateId !== null) {\r\n                                      map.setFeatureState(\r\n                                          { source: sourceId, id: hoveredStateId },\r\n                                          { hover: false }\r\n                                      );\r\n                                      }\r\n                                      hoveredStateId = e.features[0].id;\r\n                                      map.setFeatureState(\r\n                                      { source: sourceId, id: hoveredStateId },\r\n                                      { hover: true }\r\n                                      );\r\n                                      if (hoveredStateId) {\r\n                                      map.getCanvas().style.cursor = 'pointer';\r\n                                      // popup\r\n                                      map.getCanvas().style.cursor = 'pointer';\r\n                                      // Copy coordinates array.\r\n                                      const coordinates = [coor.lng, coor.lat]\r\n                                      const description = e.features[0].properties.name;\r\n                                      // Ensure that if the map is zoomed out such that multiple\r\n                                      // copies of the feature are visible, the popup appears\r\n                                      // over the copy being pointed to.\r\n                                      while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                                          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                                      }\r\n                                      // Populate the popup and set its coordinates\r\n                                      // based on the feature found.\r\n                                      popup.setLngLat(coordinates).setHTML(description).addTo(map);\r\n                                      }\r\n                                  }\r\n                              });\r\n                              // mouseleave event\r\n                              map.on('mouseleave', `${sourceId}-fills`, () => {\r\n                              if (hoveredStateId !== null) {\r\n                                  map.setFeatureState(\r\n                                  { source: sourceId, id: hoveredStateId },\r\n                                  { hover: false }\r\n                                  );\r\n                              }\r\n                              hoveredStateId = null;\r\n                              map.getCanvas().style.cursor = '';\r\n                              \r\n                              popup.remove();\r\n                            });\r\n                          })\r\n                      }\r\n                  })\r\n              }\r\n          } catch (err) {this.errorResponse(err)} finally {\r\n              this.maps.loading.show = false\r\n          }\r\n      },\r\n      async initializeMapLahan() {\r\n          try {\r\n              let utils = this._utils\r\n              let mapOptions = this.maps\r\n              mapOptions.loading.show = true\r\n              mapOptions.loading.text = 'Mengambil data lahan...'\r\n              // const markerCoordinates = [this.long, this.lat]\r\n              const resLahans = await axios.get(this.$store.getters.getApiUrl(`GetLahanAllAdmin?program_year=2022&typegetdata=all`), this.$store.state.apiConfig)\r\n              let lahans = resLahans.data.data.result.data\r\n              const randomSliceStart = Math.floor(Math.random() * (lahans.length - 50));\r\n              lahans = lahans.slice(randomSliceStart, randomSliceStart + 50).map(val => {\r\n                return {\r\n                  ...val, \r\n                  long: val.location.split(' ')[1],\r\n                  lat: val.location.split(' ')[0],\r\n                }\r\n              })\r\n              console.log(lahans)\r\n              mapboxgl.accessToken = mapOptions.accessToken\r\n              if (!mapboxgl.supported()) {\r\n                  Swal.fire({\r\n                      title: 'Warning!',\r\n                      text: `Your browser does not support Mapbox GL.`,\r\n                      icon: 'error',\r\n                      confirmButtonColor: '#f44336',\r\n                  }) \r\n              } else if (true) {\r\n                  mapOptions.loading.show = true\r\n                  const layerStyle = mapOptions.layerStyle\r\n                  const sourceId = this._utils.generateRandomString(5) + Date.now()\r\n                  \r\n                  layerStyle.fill.color = this._utils.getRandomColor()\r\n                  mapOptions.loading.text = 'Getting polygon data...'\r\n                  mapOptions.loading.text = 'Initialize map...'\r\n                  let map = await new mapboxgl.Map({\r\n                      container: 'DashboardMapboxContainer', // container ID\r\n                      style: mapOptions.mapStyle, // style URL\r\n                      center: mapOptions.center,\r\n                      zoom: mapOptions.zoom,\r\n                      projection: 'globe'\r\n                      // projection: 'equirectangular'\r\n                  });\r\n                    // disable map zoom when using scroll\r\n                  await map.scrollZoom.disable();\r\n                  // console.log('map')\r\n                  await map.doubleClickZoom.disable()\r\n                  // disable map rotation using right click + drag\r\n                  await map.dragRotate.disable();\r\n                  // disable map rotation using touch rotation gesture\r\n                  await map.touchZoomRotate.disableRotation();\r\n                  // add fullscreen function\r\n                  await map.addControl(new mapboxgl.FullscreenControl());\r\n                  await map.on(\"load\", async function() {\r\n                      // add fog\r\n                      await map.setFog({\r\n                          color: 'rgb(186, 210, 235)', // Lower atmosphere\r\n                          'high-color': 'rgb(36, 92, 223)', // Upper atmosphere\r\n                          'horizon-blend': 0.02, // Atmosphere thickness (default 0.2 at low zooms)\r\n                          'space-color': 'rgb(11, 11, 25)', // Background color\r\n                          'star-intensity': 0.6 // Background star brightness (default 0.35 at low zoooms )\r\n                      });\r\n                      // Add zoom and rotation controls to the map.\r\n                      await map.addControl(new mapboxgl.NavigationControl());\r\n                      mapOptions.loading.show = await false\r\n                      let marker = []\r\n                      for (let lmarkerIndex = 0; lmarkerIndex < lahans.length; lmarkerIndex++) {\r\n                        const markerCoordinates = [lahans[lmarkerIndex].long, lahans[lmarkerIndex].lat]\r\n                        const popupContent = `\r\n                            <table>\r\n                                <tr>\r\n                                    <td>Desa</td>\r\n                                    <td>:</td>\r\n                                    <td>${ lahans[lmarkerIndex].desa || '-' }</td>    \r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Petani</td>\r\n                                    <td>:</td>\r\n                                    <td>${ lahans[lmarkerIndex].petani || '-' }</td>    \r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Luas Lahan</td>\r\n                                    <td>:</td>\r\n                                    <td>${ utils.numberFormat(lahans[lmarkerIndex].luas_lahan) } m<sup>2</sup></td>    \r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Tipe Lahan</td>\r\n                                    <td>:</td>\r\n                                    <td>${ lahans[lmarkerIndex].lahan_type || '-' }</td>    \r\n                                </tr>\r\n                            </table>`\r\n                        marker[lmarkerIndex] = new mapboxgl.Marker()\r\n                        .setLngLat(markerCoordinates)\r\n                        .setPopup(new mapboxgl.Popup().setHTML(popupContent))\r\n                        .addTo(map);\r\n                        marker[lmarkerIndex].getElement().addEventListener('dblclick', () => {\r\n                          map.flyTo({\r\n                            center: markerCoordinates,\r\n                            zoom: 15,\r\n                            duration: 3 * 1000\r\n                          });\r\n                        });\r\n                      }\r\n                  })\r\n                  await map.flyTo({\r\n                      center: [108.909203, -7.143859],\r\n                      zoom: 6,\r\n                      duration: 7 * 1000\r\n                  });\r\n              }\r\n          } catch (err) {\r\n            this.map_type.model = 'Wilayah Target'\r\n            this.errorResponse(err)\r\n          } finally {\r\n              this.maps.loading.show = false\r\n          }\r\n      },\r\n  }\r\n}\r\n</script>","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=39c65607&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAutocomplete } from 'vuetify/lib/components/VAutocomplete';\nimport { VBadge } from 'vuetify/lib/components/VBadge';\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCardText } from 'vuetify/lib/components/VCard';\nimport { VDivider } from 'vuetify/lib/components/VDivider';\nimport { VIcon } from 'vuetify/lib/components/VIcon';\nimport { VOverlay } from 'vuetify/lib/components/VOverlay';\nimport { VProgressCircular } from 'vuetify/lib/components/VProgressCircular';\ninstallComponents(component, {VAutocomplete,VBadge,VCard,VCardText,VDivider,VIcon,VOverlay,VProgressCircular})\n","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","import Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'transitionable',\n\n  props: {\n    mode: String,\n    origin: String,\n    transition: String,\n  },\n})\n"],"sourceRoot":""}